第三章 字符串、向量和数组

/**********
@3.1 命名空间的using声明
**********/
using std::cin;

/**********
@3.2 标准库类型string
**********/

3.2.1 定义和初始化string对象
初始值只有一个参数时,
直接初始化(direct initialization) --> string s(s0); string s("value");
拷贝初始化(copy initialization)   --> string s = s0; sting s = "value";
若使用explicit可抑制构造函数隐式转换，则sting s = "value"将出错
初始值有多个参数时,
直接初始化 --> string s(n, 'c');
拷贝初始化 --> string s = string(n, 'c');

3.2.2 string对象上的操作
#读
is >> s;         --> 忽略开头空白(空格符、换行符、制表符等)，遇到下一处空白为止，返回is
getline(is, s);  --> 不忽略空白，遇到换行符为止(s不保存换行符)，返回is
#写
os << s;
#大小
s.empty();  --> bool
s.size();   --> string::size_type(无符号类型，足够存放任何string对象的大小) -> s.size() < -1几乎肯定为true
#比较
==, !=, <, <=, >, >=  --> 依照大小写敏感的字典顺序比较
#赋值
s1 = s2  --> 用s2的副本替换s1的内容
#相加
s3 = s1 + s2; s2 += s1;
字面值和string相加 --> s3 = s1 + "value"; s3 = "value" + s1; --> 加号两侧至少有一个对象是string

3.2.3 处理string对象中的字符
#<cctype>
isalnum, isalpha, isdigit, isxdigit, ispunct, iscntrl, isspace, isgraph, isprint, islower, isupper;
tolower, toupper;
#range for
for (declaration: expression)
	statement
expression 	--> 表示一个序列
declaration --> 每次迭代被初始化为expression中的下一个元素值
#下标运算符[]
超出范围引发不可预知结果(c++标准不要求标准库检测下标是否合法)

/**********
@标准库类型vector
**********/

3.3.1 定义和初始化vector对象
默认初始化     --> vector<T> v --> 空vector
直接初始化     --> vector<T> v1(v2); vector<T> v1{a,b,c...};
拷贝初始化     --> vector<T> v1 = v2; vector<T> v1 = {a,b,c...};
值初始化       --> vector<int> v(10); --> 10个元素都初始化为0
指定数量初始化 --> vector<T> v(n); vector<T> v(n, val);	// explicit

3.3.2 向vector对象中添加元素
v.push_back(t);

3.3.3 其他vector操作
v.empty();
v.size();
==, !=, <, <=, >, >=;
=;
[];

/**********
@3.4 迭代器介绍
**********/
比下标运算[]更通用的访问标准库容器元素的机制 --> 迭代器(iterator) --> 所有标准库容器都可以用

3.4.1 使用迭代器
*iter, iter->mem, ++iter, --iter;
==, !=;
begin()  --> 指向第一个元素; end()  --> 尾后迭代器(off-the-end iterator);
如果容器对象是常量，只能用const_iterator --> begin和end返回const_iterator;
如果容器对象不是常量，iterator和const_iterator都能用 --> begin和end返回iterator;
cbegin和cend始终返回const_iterator;
改变容器对象容量的操作可能使其迭代器失效;

3.4.2 迭代器运算
string和vector的迭代器提供了更多额外运算符(iterator arithmetic)
iter + n, iter - n, iter += n, iter -= n, iter1 - iter2; 
<, <=, >, >=;

/**********
@3.5 数组
**********/
数组的大小确定不变

3.5.1 定义和初始化内置数组
type a[d];
数组中元素的个数也属于数组类型的一部分，编译的时候应该是已知的(常量表达式)
数组中的元素被默认初始化
列表初始化时，若没有指明数组维度，编译器会根据初始值的数量推测出来; 若指明了维度(不能小于初始值数量)，剩余元素默认值初始化(0)
字符数组额外的初始化形式 --> 字符串字面值初始化 --> 自动添加'\0'
指向数组的指针 --> type (*pArray)[n];
包含指针的数组 --> type *arr[d];

3.5.2 访问数组元素 
range for --> for (auto i : a) { };  --> 因为维度是数组类型的一部分
[]        --> size_t id; i = a[id];  --> 索引值id通常采用size_t类型(无符号)，但是也可以是用负数
		  --> a = a + 2; a[-1] == a[1];

3.5.3 指针和数组
使用数组时，编译器一般会把它转换成指针  --> type *p = &a[0]; <--> type *p = a; <--> auto p(a);
使用decltype关键字时，上述转换不会发生 --> decltype(a) ia; <--> type ia[d];
iterator头文件提供两个函数 --> type *beg = begin(a); type *end = end(a); --> 首元素指针和尾后指针
两个指针相减的结果为ptrdiff_t类型

3.5.4 C风格字符串
C-style character string --> 不是一种类型，而是一种约定俗成的写法
cstring头文件包含一组函数可以操作C风格字符串，输入必须以'\0'结尾
strlen(p) 	   --> 字符串长度，不计空字符
strcmp(p1, p2) --> p1 == p2, return 0; p1 < p2, return 负值; p1 > p2, return 正值;
strcat(p1, p2) --> p2附加到p1, 返回p1;
strcpy(p1, p2) --> p2拷贝给p1, 返回p1;

3.5.5 与旧代码的接口
任何出现字符串字面值的地方都可以用空字符结束的字符数组来替代 --> string s = p;
需要C风格字符串的地方需要用string提供的c_str()成员函数     --> char *str = s.c_str();
无法保证c_str()返回的数组一直有效 --> 若后续s的尺寸变化，c_str()可能变成未定义
使用数组初始化vector对象 --> vector<type> v(begin(a), end(a)); --> 提供首元素地址和尾后地址


/**********
@3.6 多维数组
**********/
多维数组本质上是数组的数组
初始化可以内层嵌套着花括号，也可不用，若少于维度定义的元素个数，剩余元素默认值初始化(0)
range for语句遍历多维数组，除了内层循环外，其他所有循环的控制变量都应该是引用类型，以避免数组自动转成指针
