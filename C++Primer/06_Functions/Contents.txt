第六章 函数

/**********
6.1 基础
**********/
函数是一个命名了的代码块，包括返回类型，函数名字和形参(parameter)
· 为了与C语言兼容，可用void表示函数没有形参
函数通过调用运算符(call operator)来执行，它作用于一个表达式，该表达式是函数或者指向函数的指针，括号内为实参(argument)列表，用来初始化形参
· 实参的求值顺序没有规定

6.1.1 局部对象
在所有函数体之外定义的对象  --> 存在于程序的整个执行过程中，在程序启动时被创建，直到程序结束时被销毁
局部变量(local variable) --> 形参和函数体内部定义的变量，其生命周期依赖于定义的方式
· 自动对象(automatic object)       --> 只存在于块执行期间的对象 --> 包括普通局部变量和形参 --> 默认初始化
· 局部静态对象(local static object) --> 程序执行路径第一次经过对象定义的语句时初始化，直到程序终止才被销毁 --> 值初始化

6.1.2 函数声明
函数三要素(返回类型，函数名，形参类型)描述了函数的接口
函数声明也称为函数原型(function prototype)

/**********
6.2 参数传递
**********/

6.2.1 传值参数
引用传递(passed by reference) --> 形参是引用类型

6.2.2 传引用参数
值传递(passed by value)       --> 形参是非引用类型

6.2.3 const形参和实参
普通常量 --> 非顶层const可以初始化顶层const，顶层const也可以初始化非顶层const
常量指针 --> 非底层const可以初始化底层const，但底层const不可以初始化非底层const
常量引用 --> 非常量引用(普通引用)必须用同类型的对象初始化，常量引用可以用字面值初始化

6.2.4 数组形参
指向元素的指针 --> int *, int[], int[10] --> 等价
指向数组的指针 --> int (*arr)[2]
数组的引用    --> int (&arr)[2]

传递一维数组的方式：
· 用标记指定数组长度 --> C风格字符串用空字符\0            --> (const char *cp)
· 使用标准库规范    --> 传入两个迭代器begin(ia)和end(ia) --> (const int *beg, const int *end)
· 传递数组大小      --> begin(ia) - end(ia)           --> (const int *ia, size_t size)
· 传递数组引用      --> ia                            --> (const int (&ia)[2])
· 传递数组指针      --> &ia                           --> (const int (*ia)[2])

传递多维数组的方式：
多维数组真正传递的是指向数组第二维及之后的维度大小都是第一维度数组中的数组类型
